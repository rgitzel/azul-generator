
service: ${env:deployment_name}-${opt:stage}-generator

provider:
  name: aws
  endpointType: REGIONAL
  runtime: nodejs8.10
  stage: ${opt:stage}
  apiName: ${self:service}
  region: ${opt:region}
  stackName: ${self:service}
  deploymentBucket:
    name: ${env:serverless_deployment_bucket_prefix}-${opt:region}

plugins:
  # allows us to return a binary file
  - serverless-apigw-binary
  # automatically builds and packages Typescript
  - serverless-webpack
  # manage Route53 and Cloudfront
#  - serverless-domain-manager

custom:
  apigwBinary:
    types:
      - '*/*'
#  customDomain:
#    domainName: '${opt:stage}.lab.dropd.com'
#    basePath: ''
#    stage: ${opt:stage}
#    createRoute53Record: true
#    certificateName: '${opt:stage}.lab.dropd.com'
  webpack:
    includeModules: true

functions:
  AzulBoard:
    handler: src/lambda.handler
    events:
      - http:
          path: board-serverless.pdf
          method: get
    role: BasicRole


resources:
  Resources:
    BasicRole:
      Type: 'AWS::IAM::Role'
      Properties:
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'sts:AssumeRole'
              Principal:
                Service: lambda.amazonaws.com

  Outputs:
    RestApiId:
      Description: 'the short ID of the API Gateway API'
      Value: !Ref ApiGatewayRestApi
