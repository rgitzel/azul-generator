
service: azul-generator-dev-generator

provider:
  name: aws
  endpointType: REGIONAL
  runtime: nodejs8.10
  stage: dev
  apiName: ${self:service}
  region: ${opt:region}
  stackName: ${self:service}
  deploymentBucket:
    name: serverless-deployment-onica-rodney-${opt:region}

plugins:
  # allows us to return a binary file
  - serverless-apigw-binary
  # automatically builds and packages Typescript
  - serverless-webpack
  # manage Route53 and Cloudfront
#  - serverless-domain-manager

custom:
  apigwBinary:
    types:
      - '*/*'
  webpack:
    includeModules: true

functions:
  AzulBoard:
    handler: src/lambda.handler
    events:
      - http:
          path: board-serverless.pdf
          method: get
    role: BasicRole

  AzulBoard2:
    handler: src/lambda.handler
    events:
      - http:
          path: board-serverless.pdf
          method: get
    role: BasicRole
    environment:
      foo: !GetAtt AzulBoardLambdaFunction.Arn

resources:
  Resources:
    BasicRole:
      Type: 'AWS::IAM::Role'
      Properties:
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'sts:AssumeRole'
              Principal:
                Service: lambda.amazonaws.com

  Outputs:
    RestApiId:
      Description: 'the short ID of the API Gateway API'
      Value: !Ref ApiGatewayRestApi
